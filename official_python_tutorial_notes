# Official Python Tutorial Notes

## 1. Whetting Your Appetite
## 2. Using the Python Interpreter
## 3. An Informal Introduction to Python
## 4. More Control Flow Tools

## 5. Data Structures

### 5.3. Tuples and Sequences

Note that multiple assignment is really just a combination of tuple
packing and sequence unpacking

### 5.4. Sets

Unordered collection with no duplicate elements. Common use cases are
membership testing and eliminating duplicate entries.

Mathematical operations like union, intersection, difference, and 
symmetric difference.

Curly braces or the `set()` function can be used to create sets. To
create an empty set, use `set()`, not `{}`. The latter creates an
empty dictionary.

E.g.

>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

>>> 'orange' in basket
True

>>> 'apple' in basket
True

>>> 'crabgrass' in basket
False

Similar to list comprehensions, set comprehensions are also supported.

>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'r', 'd'}

### 5.5. Dictionaries

Think of a dictionary as a set of key:value pairs, with the
requirement that keys are unique (within on dictionary). 

`list(d)` on a dictionary returns a list of all keys used in the
dictionary, in insertion order (if you want it sorted, use 
`sorted(d)`. To check whether a single key is in the dictionary,
use the `in` keyword.

`dict()` constructor builds dictionaries directly from sequences of
key-value pairs.

dict comprehensions can be used to create dictionaries from arbitrary
key and value expressions:

>>> {x: x**2 for x in (2, 4, 6)}
{2:4, 4: 16, 6:36}

### 5.6.  Looping Techniques

#### `items()`

When looping through dictionary, key & corresponding value can be retrieved at the same time using the `items()` method.

#### `enumerate()`

When looping through a sequence, index & corresponding value can be 
retrieved at the same time using the `enumerate()` function.

#### `zip()`

To loop over two or more sequences at the same time, the entries
can be paired with the `zip()` funciton.

>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
... 	print('What is your {0}. It is {1}'.format(q, a)
...
What is your name? It is lancelot.
What is your quest? It is the holy grail.
What is your favorite color? It is blue.

#### `reversed()`

To loop in reverse, apply the `reversed()` function.

>>> for i in reversed(range(1, 10)):
...	print(i)

#### `sorted()`

To loop over a sequence in sorted order, used the `sorted()` function which returns a new sorted list while leaving the source unaltered

>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
>>> for f in sorted(set(basket)):
... 	print f
...
apple
banana
orange
pear

#### Creating vs Editing

It is usually simpler and safer to create a new list instead of looping and
changing the original list.


### 5.7.  More on Conditions
### 5.8.  Comparing Sequences and Other Types

# 6. Modules

Using a module, we can put defintions in a file and use them in a script or in an interactive instance of the interpreter.

See `fibo.py`

### 6.1.  More on Modules
#### 6.1.1. Executing modules as scripts

When you run a Python module with

>>> python fibo.py <arguments>

the code in the module will be executed, just as if you imported it, but with the __name__ set to "__main__". That means by adding this code at the end of your module:

>>> if __name__ == "__main__":
>>>     import sys
>>>     fib(int(sys.argv[1]))

you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the "main" file.

This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).

#### 6.1.2. The Module Search Path 

When you import a module (e.g. spam.py), the interpreter first searches for a match in the built-in modules. If not found, it searches for a file named spam.py in the list of directories given by the variable sys.path.

sys.path is initialized from these locations:

- The directory containing the input script (or current directory when no file is specified).
- PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH)
- The installation-dependent default

#### 6.1.3. “Compiled” Python files

### 6.2. Standard Modules
### 6.3. The dir() Function
### 6.4. Packages
#### 6.4.1. Importing * From a Package

Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practice in production code.

#### 6.4.2. Intra-package References
#### 6.4.3. Packages in Multiple Directories

## 7. Input and Output
### 7.1. Fancier Output Formatting

Formatted String Literals, begin a string with `f` or `F` before the opening quotation mark or triple quotation mark. Inside the string, use `{` and `}` to refer to variables or literal values.

`repr()` and `str()` can be used to convert any value to a string.

#### 7.1.1. Formatted STring Literals

##### `f-strings`
include vlaue of Python expressions inside a string by prefixing the string with `f` or `F` and writing expressions as `{expression}`

>>> print('The value of pi is approximately {math.pi:.3f}')
The value of pi is approximately {math.pi:.3f}

>>> print(f'The value of pi is approximately {math.pi:.3f}')
The value of pi is approximately 3.142

##### `lining up columns with ':``

Passing an integer after the ':' will cause that field to be a minimum number of characters wide, very useful for making columns line up.

>>> table
{'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678, 'Anthony': 123456778}
>>> for name,phone in table.items():
...     print(f'{name:10} {phone:10}')
... 
Sjoerd           4127
Jack             4098
Dcab             7678
Anthony     123456778

### 7.2. The String format() Method

Basic Usage: 

>>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
We are the knights who say "Ni!"

`{}` are called format fields and are replaced with the objects passed into them from the `str.format()` method. A number in the bracket refers to the position of the object passed into the `str.format` method. 

>>> print("{} and {}".format("eggs", "ham"))
eggs and ham
>>> print("{0} and {1}".format("eggs", "ham"))
eggs and ham
>>> print("{1} and {0}".format("eggs", "ham"))
ham and eggs

You can use keyword arguments as well:

>>> print("The {food} is {adjective}".format(food="chicken", adjective="spicy"))
The chicken is spicy

You can use dictionaries as well. The 0 refers to the only passed object to `str.format()`; in this case, this is `firms`.

>>> firms = {'Triage': 56, 'BlackRock': 85, 'Google': 150}
>>> print('Triage: {0[Triage]:d}; BlackRock: {0[BlackRock]:d}; Google: {0[Google]:d}'.format(firms))
Triage: 56; BlackRock: 85; Google: 150

A similar result can be returned by using the `**` notation on the passed object.

>>> print('Triage: {Triage:d}; BlackRock: {BlackRock:d}; Google: {Google:d}'.format(**firms))
Triage: 56; BlackRock: 85; Google: 150

FYI `vars()`, a built-in function, returns a dictionary containing all local variables. 

Another example:

>>> for x in range (1, 11):
...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
... 
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000

#### 7.1.3. Manual String Formatting

You can use `str.rjust()`, `str.ljust()`, `str.center()`

`str.zfill()` is pretty cool too.

#### 7.1.4. Old string formatting

This be old, use the new way.

>>> import math
>>> print('The value of pi is approximately %5.3f.' % math.pi)
The value of pi is approximately 3.142.

### 7.2. Reading and Writing Files

`open()` returns a `file object`. Common usage: `open(filename, mode).

f = open('workfile', 'w')

It is good practice to use the `with` keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using `with` is also much shorter than writing equivalent `try-finally` blocks.

>>> with open('workfile') as f:
...     read_data = f.read()
>>> f.closed
True

If you do not use `with`, then call `f.close()` to free up system resources. If you do not, Python's garbage collector will eventually destroy the object and close the open file.

#### 7.2.1. Methods of File Objects

`f.readline()`
`list(f)`
`f.write(string)` writes the contents of string to the file, returning the number of characters written.

`f.tell()` - return integer giving the file object's current position in the file represented as number of bytes from the beginning of the file when in binary mode.
`f.seek(offset, from_what)` to change file object's position.

#### 7.2.2. Saving structured data with json

The standard module called `json` can take Python data hierarchies, and convert them to string representations; this process is called serializing. Reconstructing the data from the string representation is called deserializing. 

`json.dumps`
`json.dump(x, file)` serializes a json object x, to a text file
`json.load(file)` decode the text file object

`pickle` module, a protocol that allows you to serialize arbitrary Python objects. It is specific to Python and can't be used with other languages. It is also insecure by default: deserializing pickle data from an unknown source can result in execution of arbitrary code.


## 8. Errors and Exceptions

Syntax Errors and Exceptions

### 8.1. Syntax Errors

aka parsing errors. The error is usually caused by something proceeding the arrow, e.g. arrow points to a print statement, but a `:` is missing before it.

### 8.2. Exceptions

Even if a statement/expression is syntactically correct, it may cause an error you try to execute. Errors during execution are called exceptions and are not unconditionally fatal: you need to learn how to handle them in your Python programs. 

Some examples:

>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly

### 8.3. Handling Exceptions

e.g.

>>> while True:
...     try:
...         x = int(input("Please enter a number: "))
...         break
...     except ValueError:
...         print("Oops!  That was no valid number.  Try again...")
...

FYI - you can have more than one exception for a try statement, to specify handlers for different exceptions. At most one handler will be executed.

... except (RuntimeError, TypeError, NameError):
...     pass


